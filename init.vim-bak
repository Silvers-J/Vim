call plug#begin('~/.config/nvim/plugged')
Plug 'scrooloose/nerdtree'
Plug 'itchyny/lightline.vim'
Plug 'neoclide/coc.nvim', {'branch': 'release'}
Plug 'pangloss/vim-javascript'
Plug 'jiangmiao/auto-pairs'
Plug 'SirVer/ultisnips'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-commentary'
Plug 'honza/vim-snippets'
Plug 'ThePrimeagen/vim-be-good', {'do': '.\install.sh'}
Plug 'dracula/vim'
Plug 'tpope/vim-fugitive'
Plug 'stsewd/fzf-checkout.vim'
Plug 'ap/vim-css-color'
Plug 'vimwiki/vimwiki'
Plug 'tpope/vim-repeat'
Plug 'wavded/vim-stylus'
Plug 'wellle/targets.vim'
Plug 'mattn/emmet-vim'
Plug 'godlygeek/tabular'
Plug 'mhinz/vim-startify'
Plug 'aquach/vim-http-client'
Plug 'sainnhe/gruvbox-material'
Plug 'shinchu/lightline-gruvbox.vim'
Plug 'nvim-lua/popup.nvim'
Plug 'nvim-lua/plenary.nvim'
Plug 'nvim-telescope/telescope.nvim'
Plug 'nvim-telescope/telescope-fzy-native.nvim'
Plug 'nvim-treesitter/nvim-treesitter', {'do': ':TSUpdate'}
Plug 'ryanoasis/vim-devicons'
Plug 'mikelue/vim-maven-plugin'
call plug#end()

echo ">^.^<"

set number
set rnu
set hidden
set nowrap
set nobackup
set nowritebackup
set noswapfile
set cmdheight=2
set shortmess+=c
set backspace=indent,eol,start
set softtabstop=0
set expandtab
set smarttab
filetype plugin on
set omnifunc=syntaxcomplete#Complete
set foldmethod=syntax


"jump to end of line while in insert mode
inoremap <C-e> <C-o>$
nnoremap <space><space> :nohl<CR>
nnoremap <leader>sv :source $MYVIMRC<CR>
nnoremap <leader>ev :vs $MYVIMRC<CR>
"Capitalize the word before the cursor
nnoremap <leader><C-u> vawU
inoremap <leader><C-u> <ESC>vawUea
inoremap jk <esc>
vnoremap jk <esc>
nnoremap <Leader>s :%s/\<<C-r><C-w>\>//g<Left><Left>
nnoremap <leader>p "*P
nnoremap <leader>y "*y
" Move lines
nnoremap <A-j> :m .+1<CR>==
nnoremap <A-k> :m .-2<CR>==
inoremap <A-j> <Esc>:m .+1<CR>==gi
inoremap <A-k> <Esc>:m .-2<CR>==gi
vnoremap <A-j> :m '>+1<CR>gv=gv
vnoremap <A-k> :m '<-2<CR>gv=gv

if has('termguicolors')
  set termguicolors
endif

" colorscheme dracula
set background=dark
let g:gruvbox_material_background = 'hard'
let g:gruvbox_material_palette = 'original'
colorscheme gruvbox-material

let g:lightline = {
      \ 'colorscheme': 'gruvbox',
      \ 'active': {
      \   'left': [ [ 'mode', 'paste' ],
      \             [ 'gitbranch', 'readonly', 'filename', 'modified' ] ]
      \ },
      \ 'component_function': {
      \   'gitbranch': 'FugitiveHead'
      \ },
      \ }

let g:NERDTreeShowHidden = 1
let g:NERDTreeMinimalUI = 1
let g:NERDTreeIgnore = []
let g:NERDTreeStatusline = ''

nnoremap <silent> <C-b> :NERDTreeToggle<CR>
nnoremap <silent> <leader>fl :NERDTreeFind<CR>

" nnoremap <C-p> :FZF<CR>
" let g:fzf_action = {
" 	\ 'ctrl-t': 'tab split',
" 	\ 'ctrl-s': 'split',
" 	\ 'ctrl-v': 'vsplit',
" 	\}
" let $FZF_DEFAULT_COMMAND = 'rg --files'

" Always show the signcolumn, otherwise it would shift the text each time diagnostics appear/become resolved.
if has("patch-8.1.1564")
  " Recently vim can merge signcolumn and number column into one
    set signcolumn=number
else
    set signcolumn=yes
endif

" Use tab for trigger completion with characters ahead and navigate.
" NOTE: Use command ':verbose imap <tab>' to make sure tab is not mapped by other plugin before putting this into your config.
inoremap <silent><expr> <tab>
      \ pumvisible() ? "\<C-n>" :
      \ <SID>check_back_space() ? "\<tab>" :
      \ coc#refresh()
inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

function! s:check_back_space() abort
	let col = col('.') - 1
        return !col || getline('.')[col - 1]  =~# '\s'
endfunction

" Use <c-space> to trigger completion.
"inoremap <silent><expr> <c-space> coc#refresh()

" Use <cr> to confirm completion, `<C-g>u` means break undo chain at current position. Coc only does snippet and additional edit on confirm.
" <cr> could be remapped by other vim plugin,try `:verbose imap <CR>`.

if exists('*complete_info')
     inoremap <expr> <cr> complete_info()["selected"] != "-1" ? "\<C-y>" : "\<C-g>u\<CR>"
else
     inoremap <expr> <cr> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"
endif

" Use `[g` and `]g` to navigate diagnostics
nmap <silent> [g <Plug>(coc-diagnostic-prev)
nmap <silent> ]g <Plug>(coc-diagnostic-next)

" GoTo code navigation.
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)

" Use K to show documentation in preview window
nnoremap <silent> K :call <SID>show_documentation()<CR>

function! s:show_documentation()
  if (index(['vim','help'], &filetype) >= 0)
      execute 'h '.expand('<cword>')
  else
      call CocAction('doHover')
endif
endfunction

" Highlight the symbol and its references when holding the cursor.
autocmd CursorHold * silent call CocActionAsync('highlight')

" Symbol renaming.
nmap <leader>rn <Plug>(coc-rename)

" Formatting selected code.
xmap <leader>f <Plug>(coc-format-selected)
nmap <leader>f <Plug>(coc-format-selected)

augroup mygroup 
   autocmd!
 " Setup formatexpr specified filetype(s).
	autocmd FileType typescript,json setl formatexpr=CocAction('formatSelected')
       " Update signature help on jump placeholder.
         autocmd User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')
    augroup end

" Applying codeAction to the selected region.
" Example: `<leader>aap` for current paragraph
xmap <leader>a <Plug>(coc-codeaction-selected)
nmap <leader>a <Plug>(coc-codeaction-selected)

" Remap keys for applying codeAction to the current buffer.
nmap <leader>ac <Plug>(coc-codeaction)
" Apply AutoFix to problem on the current line.
nmap <leader>qf <Plug>(coc-fix-current)

" Map function and class text objects
" NOTE: Requires 'textDocument.documentSymbol' support from the language server.
xmap if <Plug>(coc-funcobj-i)
omap if <Plug>(coc-funcobj-i)
xmap af <Plug>(coc-funcobj-a)
omap af <Plug>(coc-funcobj-a)
xmap ic <Plug>(coc-classobj-i)
omap ic <Plug>(coc-classobj-i)
xmap ac <Plug>(coc-classobj-a)
omap ac <Plug>(coc-classobj-a)

" Use CTRL-S for selections ranges.
" Requires 'textDocument/selectionRange' support of LS, ex: coc-tsserver
nmap <silent> <C-s> <Plug>(coc-range-select)
xmap <silent> <C-s> <Plug>(coc-range-select)

" Add `:Format` command to format current buffer.
command! -nargs=0 Format :call CocAction('format')

" Add `:Fold` command to fold current buffer.
command! -nargs=?  Fold :call CocAction('fold', <f-args>)

" Add `:OR` command for organize imports of the current buffer.
command! -nargs=0 OR :call CocAction('runCommand', 'editor.action.organizeImport')

" Add (Neo)Vim's native statusline support.
" NOTE: Please see `:h coc-status` for integrations with external plugins that
" provide custom statusline: lightline.vim, vim-airline.
set statusline^=%{coc#status()}%{get(b:,'coc_current_function','')}

set statusline^=%{FugitiveStatusline()}
" Mappings using CoCList: Show all diagnostics.
nnoremap <silent> <space>a :<C-u>CocList diagnostics<cr>
" Manage extensions.
nnoremap <silent> <space>e :<C-u>CocList extensions<cr>
" Show commands.
nnoremap <silent> <space>c :<C-u>CocList commands<cr>
" Find symbol of current document.
nnoremap <silent> <space>o :<C-u>CocList outline<cr>
" Search workspace symbols.
nnoremap <silent> <space>s :<C-u>CocList -I symbols<cr>
" Do default action for next item.
nnoremap <silent> <space>j :<C-u>CocNext<CR>
" Do default action for previous item.
nnoremap <silent> <space>k :<C-u>CocPrev<CR>
" Resume latest coc list.
nnoremap <silent> <space>p :<C-u>CocListResume<CR>


let g:UltiSnipsSnippetsDir="~/AppData/Local/nvim/plugged/vim-snippets/"
let g:UltiSnipsSnippetDirectories=["UltiSnips"]

let g:UltiSnipsExpandTrigger="<c-c>"
let g:UltiSnipsJumpForwardTrigger="<c-b>"
let g:UltiSnipsJumpBackwardTrigger="<c-z>"

let g:UltiSnipsEditSplit="vertical"

" let g:user_emmet_leader_key = "<C-l>"

" list files/git files
command! Ctrlp execute (exists("*fugitive#head") && len(fugitive#head())) ? 'GFiles' : 'Files'
map <C-p> :Ctrlp<CR>
" list all files
nnoremap <leader>f :Files<CR>
" search buffer powered by fzf
nnoremap <leader>sb :BLines<CR>
" search buffer for current word
nnoremap <leader>sB :BLines <C-R><C-A><CR>
" search across project
nnoremap <leader>sp :Rg 
" search the current word across project
nnoremap <leader>sP :Rg <C-R><C-A><CR>
" Search for buffers
nnoremap <leader>b :Buffers<CR>
vnoremap <leader>sp "sy:Rg <C-R>s<CR>

augroup filetype_indent
	autocmd!
	autocmd FileType typescript setlocal shiftwidth=2 tabstop=2
	autocmd FileType javascript setlocal shiftwidth=2 tabstop=2
	autocmd FileType html       setlocal shiftwidth=2 tabstop=2
	autocmd FileType python     setlocal shiftwidth=4 softtabstop=4 expandtab
	autocmd FileType css 	    setlocal shiftwidth=2 tabstop=2
	autocmd FileType less 	    setlocal shiftwidth=2 tabstop=2
augroup END
" autocmd BufRead *.html :normal gg=G
" autocmd BufNewFile,BufRead *.styl setlocal sw=4 ts=4 

let g:neonesterm_default_mod = "botright"

" fugitive merge 
nnoremap <leader>gs :Gstatus<CR>
nnoremap <leader>gb :GBranches<CR>
nnoremap <leader>gh :diffget //2<CR>
nnoremap <leader>gl :diffget //3<CR>

" terminal
nnoremap <leader>t :terminal<CR>
tnoremap <ESC> <C-\><C-N>


" Telescope 

lua <<  EOF
require('telescope').setup{
        extensions = {
                fzy_native = {
                    override_generic_sorter = false,
                    override_file_sorter = true,
                }
            }
}
require('telescope').load_extension('fzy_native')
EOF

" Find files using Telescope command-line sugar.
nnoremap <leader>ff <cmd>Telescope find_files<cr>
nnoremap <leader>fg <cmd>Telescope live_grep<cr>
nnoremap <leader>fb <cmd>Telescope buffers<cr>
nnoremap <leader>fh <cmd>Telescope help_tags<cr>



lua <<EOF
require'nvim-treesitter.configs'.setup {
  ensure_installed = "maintained", -- one of "all", "maintained" (parsers with maintainers), or a list of languages
  highlight = {
    enable = true,              -- false will disable the whole extension
  },
}
EOF
